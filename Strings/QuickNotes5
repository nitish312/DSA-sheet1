(Q1) Check if a given string is palindrome or not
	 1. using stack
	 	? O(N) + O(N) -> O(N) : O(N)
	 2. reverse it into another string
	 	? O(N) + O(N) -> O(1)
	 3. Two-pointer 
	 	? O(N/2) : O(1)
	 
(Q2) Count number of vowels, consonants, spaces in String
	 1. Count all using if-else ladder
	 	? O(N) : O(1)
	 

(Q3) Find the ASCII value of a character
	 1. by type-casting
	 	? O(1) : O(1) 
	 
(Q4) Remove all vowels from the string
	 1. new str - skipping vowels - continue 
	 	? O(N) : O(N) 
	 2. in-place replacing - replace()
	 	? O(N) : O(1)
	 

(Q5) Remove spaces from a string
	 1. new str - skipping spaces - continue
	 	? O(N) : O(N)
	 2. inplace replace(), (space with blank)
	 	? O(N) : O(1)
	 3. count spaces n pop
	 	? O(N) : O(1)
	 

(Q6) Remove characters from a string except alphabets
	 1. new str - push_back() only alphabets 
	 	? O(N) : O(N)


(Q7) Reverse a String
	 1. by stack
	 	? O(N) : O(N)
	 2. in-built reverse()
	 	? O(N) : O(1)
	 3. Two-pointer
	 	? O(N/2) : O(1)


(Q8) Remove brackets from an algebraic expression
	 1. if-continue 
	 	? O(N) : O(1)
	 2. in-place replacing - replace()
	 	? O(N) : O(1)


(Q9) Sum of the numbers in a String
	 1. get nums into numString, sum += stoi(numString) 
	 	? O(N) : O(N) -> for numString


(Q10) Capitalize first and last character of each word
	 1. built-in toupper()
	 	? O(N) : O(1)


(Q11) Calculate frequency of characters in a string
	 1. HashMap 
	 	? O(N) + O(N) -> O(N) : O(N)
	 2. sort & count each char with its next ind char
	 	? O(N*log(N)) + O(N) -> O(N*log(N)) : O(1)


(Q12) Find Non-repeating characters of a String
	 1. HashMap
	 	? O(N) + O(N) -> O(N) : O(N)
	 2. sort & count with next ind char, if not same, print char at curr index
	 	? O(N*log(N)) + O(N) -> O(N*log(N)) : O(1)


(Q13) Check if two strings are anagram of each other
	 1. HashMap - ++ chars of 1st string & -- chars of 2nd string, if(any value != 0) return false
	 	? O(N) + O(N) + O(N) -> O(N) : O(N)
	 2. sort & check each char
	 	? O(N*log(N)) + O(N*log(N)) + O(N) -> O(N*log(N)) : O(1) 
	 3. int arr of 26 nums, 1st str ++, 2nd --, loop 0-26, if arr[i]!=0, return false
	 	? O(N) : O(1)


(Q14) Count common sub-sequence in two strings
	 1. DP soln


(Q15) Check if two strings match where one string contains wildcard characters
	 Skipped


(Q16) Return maximum occurring character in the input string
	 1. HashMap 
	 	? O(N) : O(N)
	 2. sort
	 	? O(N*log(N)) + O(N) -> O(N*log(N)) : O(N)
	 3. charArray 
	 	? O(N) : O(256) -> O(1)


(Q17) Remove all duplicates from the input string.
	 1. monotonic stk 
	 	? O(N+N+N) -> O(N) : O(26+26+N) -> O(N)


(Q18) Print all the duplicates in the input string.
	 1. freq arr
	 	? O(N) : O(1)
	 2. HashMap
	 	? O(N) : O(1)


(Q19) Remove characters from first string present in the second string
	 1. nested arr ? O(N1*N2) : O(N)
	 2. HashMap ? O(N1+N2) : O(N)


(Q20) Change every letter with the next lexicographic alphabet in the given string
	 1. type casting - ifElseIf ? O(N) : O(1)


(Q21) Write a program to find the largest word in a given string.
(Q22) Write a program to sort characters in a string
(Q23) Count number of words in a given string
(Q24) WAP to find a word in a given string which has the highest number of repeated letters
(Q25) Change case of each character in a string
(Q26) Concatenate one string to another
(Q27) Write a program to find a substring within a string. If found display its starting position
(Q28) Reverse words in a string
